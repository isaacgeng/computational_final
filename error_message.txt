objectives = Base.Generator{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}},getfield(Main, Symbol("##206#208")){Float64,typeof(utility),typeof(production),Array{Float64,1},Interpolations.Extrapolation{Float64,1,ScaledInterpolation{Float64,1,Interpolations.BSplineInterpolation{Float64,1,Array{Float64,1},BSpline{Linear},Tuple{Base.OneTo{Int64}}},BSpline{Linear},Tuple{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},BSpline{Linear},Throw{Nothing}}}}(getfield(Main, Symbol("##206#208")){Float64,typeof(utility),typeof(production),Array{Float64,1},Interpolations.Extrapolation{Float64,1,ScaledInterpolation{Float64,1,Interpolations.BSplineInterpolation{Float64,1,Array{Float64,1},BSpline{Linear},Tuple{Base.OneTo{Int64}}},BSpline{Linear},Tuple{StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},BSpline{Linear},Throw{Nothing}}}(0.99, utility, production, [2.36551, 2.43246, 2.7368, 2.52219, 4.23958, 2.04168, 2.41778, 2.82649, 1.40425, 3.49323, 3.56297, 2.8484, 3.09422, 3.94656, 2.9799, 2.17809, 3.22567, 1.82641, 3.01218, 2.19441, 2.09019, 3.08182, 2.57523, 2.27822, 0.919094, 3.13446, 1.90501, 2.47663, 2.98098, 2.71311, 3.12886, 2.79189, 3.13417, 3.22287, 1.94492, 2.56108, 3.50728, 3.23958, 2.62137, 3.19224, 4.28379, 2.47982, 3.28426, 2.77806, 2.19724, 3.42486, 4.06748, 3.07406, 2.5689, 1.93884, 2.93173, 3.69254, 2.42421, 2.4789, 2.34673, 3.39578, 2.88595, 2.58886, 3.20122, 2.21552, 1.79923, 2.45163, 2.73689, 2.92823, 2.76722, 2.17357, 1.65089, 2.59394, 2.34818, 1.86386, 2.64559, 2.47719, 3.67795, 2.58312, 2.72678, 2.81551, 2.12103, 2.03987, 3.83011, 2.67844, 2.48862, 1.89227, 4.93809, 2.80514, 2.94248, 2.91268, 1.81049, 2.15044, 2.15411, 1.65262, 2.81338, 5.97386, 2.2697, 2.35308, 3.0491, 2.89158, 2.7009, 2.32096, 2.10622, 1.95839, 3.22769, 2.65475, 2.5315, 2.49755, 2.65424, 3.29446, 3.89857, 2.53766, 2.47216, 2.26897, 2.81487, 1.91107, 3.53907, 1.55355, 2.28753, 1.92412, 3.15334, 3.20672, 5.41801, 3.0554, 2.66405, 2.7729, 2.48276, 2.28855, 2.2843, 2.44129, 2.32971, 2.23249, 3.47239, 2.6072, 2.4345, 2.71105, 3.00983, 2.4704, 2.44084, 2.68255, 3.28964, 1.77366, 2.3019, 4.05016, 3.11309, 2.90831, 3.63619, 2.13015, 3.15132, 2.35069, 2.09527, 2.59059, 2.43829, 2.77613, 3.52878, 2.40325, 3.7116, 3.59712, 2.63576, 2.08211, 2.93344, 1.73281, 2.62959, 3.1822, 1.5137, 2.61187, 3.22162, 2.25649, 3.69756, 3.5703, 4.36652, 2.54221, 4.52608, 2.75643, 2.27087, 2.60981, 2.52927, 1.62684, 1.5553, 2.03735, 1.84081, 1.9385, 2.48731, 1.79812, 2.1076, 3.8139, 2.26465, 3.91514, 3.64694, 3.92512, 4.65881, 2.58712, 1.99449, 3.06198, 3.13178, 4.70113, 2.60715, 1.71593, 2.3434, 2.43226, 4.35047, 2.19405, 3.1041, 3.44485, 3.08527, 1.90271, 2.91011, 4.14053, 3.38672, 2.4767, 1.94565, 2.30268, 2.48172, 2.8068, 2.19485, 3.27588, 2.577, 3.16372, 2.61795, 2.92015, 3.46336, 3.05307, 2.65066, 3.46592, 3.81835, 3.42109, 2.7156, 3.21005, 2.42038, 2.6536, 1.88512, 2.74157, 2.85238, 3.73627, 2.29348, 3.24799, 4.10356, 1.93417, 4.0959, 1.96726, 2.33419, 2.40313, 2.77079, 2.82867, 3.03788, 2.00751, 1.93877, 2.10019, 3.55572, 3.54961, 2.60513, 2.85321, 1.46169, 2.42343], 200-element extrapolate(scale(interpolate(::Array{Float64,1}, BSpline(Linear())), (4.14006392040344:0.16643473046848006:37.26057528363097,)), Throw()) with element type Float64:
 -51.67482954121968
 -13.320728728651696
 -11.294992575766328
 -10.110444008516343
  -9.270052957595908
  -8.61827946014091
  -8.085759173648581
  -7.635552018097923
  -7.2455592283860915
  -6.901544035426586
  -6.593841552309498
  -6.3154528878962175
  -6.0613463040457685
  -5.827570393864078
  -5.611138119479266
  -5.409668129519462
  -5.2211951912526615
  -5.0441320416853355
  -4.877209019752722
  -4.719316607167107
  -4.569527869696465
  -4.427037190431323
  -4.2912072304707225
  -4.16137234390289
  -4.037094203526007
  -3.917885054574986
  -3.8033414589439047
  -3.693142723051527
  -3.586925683380209
  -3.484469632121676
  -3.3854354807778413
  -3.289724871712141
  -3.196980268472295
  -3.1071303841886992
  -3.019971590323542
  -2.9352778882319406
  -2.8530540255315318
  -2.773024118168264
  -2.695142883761312
  -2.619307766870553
  -2.5453629110280462
  -2.47325367306392
  -2.4028942412207828
  -2.3341700546589124
  -2.267043047110164
  -2.2014158395725847
  -2.1372280839098434
  -2.0744472945778036
  -2.0129442421143753
  -1.952733336904016
  -1.8937658457847573
  -1.8359110882318561
  -1.7792096643395277
  -1.7236073460455372
  -1.6690069660624527
  -1.615417519075136
  -1.5628206524351138
  -1.5111324753254718
  -1.4603262702700333
  -1.4104194357842639
  -1.3613570222836167
  -1.313063601584451
  -1.2655857819736338
  -1.2188754635998065
  -1.172883405060403
  -1.1275984164182018
  -1.0830274686002126
  -1.0391180007105647
  -0.9958421135877139
  -0.9532183103385868
  -0.9112028197598019
  -0.8697848402791166
  -0.8289373951339805
  -0.7886617511238951
  -0.7489279338586864
  -0.7097369886140863
  -0.6710585909662349
  -0.6328842680504664
  -0.5952017807533284
  -0.5580092806651431
  -0.5212746670213907
  -0.48500076767830463
  -0.44916676485892515
  -0.41377617482686685
  -0.37880203043686256
  -0.34424640764101955
  -0.31008960405397407
  -0.2763313743769965
  -0.2429586481319284
  -0.2099632575571107
  -0.1773384293229708
  -0.1450723535612672
  -0.11315159179190681
  -0.08158220646531977
  -0.0503543593899079
  -0.019457357398988073
   0.011117535494611863
   0.04138785187540983
   0.07133524700757865
   0.10098097620243329
   0.1303241985965005
   0.15937758062121288
   0.18815605107731914
   0.21664443446912898
   0.24485682047112894
   0.27279479575685434
   0.3004748003017449
   0.3278973372551342
   0.3550603103153513
   0.38197766419115653
   0.4086401774437104
   0.4350631004019883
   0.46125391061960047
   0.4872137839500823
   0.5129437440280231
   0.538446815648977
   0.5637257906048816
   0.5887905469715663
   0.6136408390288572
   0.6382821442857072
   0.6627212823319873
   0.6869594947440251
   0.7109942575234726
   0.7348226383940311
   0.7584656015540072
   0.7819199288960021
   0.8051972860140731
   0.8282842570168947
   0.8511777259446698
   0.8738977524405609
   0.8964495021335875
   0.9188303704194211
   0.9410400836724344
   0.9630732922524032
   0.9849434483725582
   1.0066548710429544
   1.0282076773941582
   1.0496013710997847
   1.0708380035841294
   1.091919811063548
   1.1128532661941943
   1.1336373457877917
   1.1542723932243695
   1.174763808130515
   1.195114392457812
   1.215322754865838
   1.2353911052977058
   1.2553229131325363
   1.275121205677943
   1.2947867277400928
   1.3143197070138175
   1.3337176000476387
   1.352990881503946
   1.3721399471673839
   1.3911654327428749
   1.4100695192570774
   1.4288487821462306
   1.4475016456338914
   1.4660406308281755
   1.4844639669041828
   1.502773383022939
   1.5209678042651509
   1.539050971792532
   1.5570185550048685
   1.5748781534744767
   1.592628883723463
   1.6102719082970842
   1.6278092905078043
   1.6452448221002063
   1.6625746152757948
   1.679802743756107
   1.696930296150129
   1.7139550167844062
   1.7308786143463493
   1.747711400836075
   1.7644474154954715
   1.7810874051087076
   1.7976344474854173
   1.8140844129239795
   1.8304360165094495
   1.8467021472583183
   1.8628817716919572
   1.8789751738815512
   1.8949791894896844
   1.910893604651091
   1.9267150820590744
   1.9424517687329237
   1.958107631683628
   1.9736843936895982
   1.9891784380685809
   2.004590296363944
   2.0199209001566185
   2.0351644430978544
   2.0503301820405997
   2.0654211001590737
   2.0804345458243136
   2.095371867728117
   2.1102363966869024
   2.1250226517095685
   2.139732688216474   ), 4.14006392040344:0.16643473046848006:37.26057528363097)
ERROR: MethodError: no method matching length(::Fminbox{NelderMead{Optim.AffineSimplexer,Optim.AdaptiveParameters},Float64,getfield(Optim,
Symbol("##46#48"))})
Closest candidates are:
  length(::Core.SimpleVector) at essentials.jl:561
  length(::Base.MethodList) at reflection.jl:801
  length(::Core.MethodTable) at reflection.jl:875
  ...
Stacktrace:
 [1] _similar_for(::UnitRange{Int64}, ::Type{Any}, ::Fminbox{NelderMead{Optim.AffineSimplexer,Optim.AdaptiveParameters},Float64,getfield(Optim, Symbol("##46#48"))}, ::Base.HasLength) at .\array.jl:517
 [2] _collect(::UnitRange{Int64}, ::Fminbox{NelderMead{Optim.AffineSimplexer,Optim.AdaptiveParameters},Float64,getfield(Optim, Symbol("##46#48"))}, ::Base.HasEltype, ::Base.HasLength) at .\array.jl:550
 [3] collect(::Fminbox{NelderMead{Optim.AffineSimplexer,Optim.AdaptiveParameters},Float64,getfield(Optim, Symbol("##46#48"))}) at .\array.jl:544
 [4] broadcastable(::Fminbox{NelderMead{Optim.AffineSimplexer,Optim.AdaptiveParameters},Float64,getfield(Optim, Symbol("##46#48"))}) at .\broadcast.jl:614
 [5] map(::typeof(Base.Broadcast.broadcastable), ::Tuple{Fminbox{NelderMead{Optim.AffineSimplexer,Optim.AdaptiveParameters},Float64,getfield(Optim, Symbol("##46#48"))}}) at .\tuple.jl:165
 [6] broadcasted at .\broadcast.jl:1166 [inlined]
 [7] #T#205(::Bool, ::Function, ::Array{Float64,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Float64, ::typeof(utility), ::typeof(production), ::Array{Float64,1}, ::Array{Float64,1}) at .\REPL[883]:10
 [8] T(::Array{Float64,1}, ::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}, ::Float64, ::Function, ::Function, ::Array{Float64,1}, ::Array{Float64,1}) at .\REPL[883]:3 (repeats 2 times)
 [9] top-level scope at none:0